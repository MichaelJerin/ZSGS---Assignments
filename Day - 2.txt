// Day -> 2 Part - I 

// 1. Write a program that uses if statement to find the minimum of three numbers.

class Min {
	public static void main(String[] args) {
		int num1 = 10; 
		int num2 = 20;
		int num3 = 15;	

		if(num1 > num2 && num1 > num3) {
			System.out.println("The Greatest is " + num1);	
		} else if (num2 > num1 && num2 > num3) {
			System.out.println("The Greatest is " + num2);	
		} else {
			System.out.println("The Greatest is " + num3);
		}
 	}
}


/* 2. Write a program to do the following patterns using for loop?
a) 1      1 	        R R R R
    1    1    		R     R
      1      		R R R R
    1    1    		R R
  1       1    		R   R */


class Xpattern {
	public static void main(String[] args) {
		int n = 5;
		
		for(int i = 0; i < n * n; i++) {
			int row = i / n;
			int col = i % n;
			
			if(row == col || row + col == n - 1) {
				System.out.print("1 ");
			} else {
				System.out.print("  ");
			}
			
			if(col == n - 1) {
				System.out.println(" ");
			}
		}
	}
}

class Rpattern {
	public static void main(String[] args) {
		int input = 8;
		int n = input / 2;

		for(int i = 1; i <= input - 1; i++) {
			for(int j = 1; j <= n; j++) {
				if(i <=n) {
					if(i == 1 || i == n) {
						System.out.print("R ");
					} else {
						if(j == 1 || j == n) {
							System.out.print("R ");	
						} else {
							System.out.print("  ");
						}
					} 
				} else {
					if(j == 1) {
						System.out.print("R ");
					} else if(i - n + 1 == j) {
						System.out.print("R ");
					} else {
						System.out.print("  ");
					}
				}
			}
			System.out.println(" ");
		}
	}
}	


/* 3. Write a program to do the following patterns using while loop?
a) 1 	b)w
  2 3 	  w w
 4 5 6 	  w w w
  7 8 	  w w
   9 	  w     */

class Diamond1 {
	public static void main(String[] args) {
		int n = 3;
		int row = n * 2 - 1;
		int space = 0;
		int i = 1;
		int num = 1;
		
		while(i <= row) {
			int j = 1;
			if(i <=n ){
				space = n - i;
			} else {
				space = i - n;
			}
			while(j <= n) {
				if(j <= space) {
					System.out.print(" ");
				} else {
					System.out.print(num + " ");
					num++;
				}
				j++;
			}
			System.out.println(" ");
			i++;
		}
	}
}


public class Triangle {
    public static void main(String[] args) {
        int n = 3;
        int row = n * 2 - 1;
        int end = 0;
        int i = 0;

        while(i <= row ) {
            int j = 1;
            if (i <= n) {
                end = n - i;
            } else {
                end = i - n;
            }

            while (j <= n - end) {
                System.out.print("w ");
                j++;
            }
            System.out.println();
            i++;
        }
    }
}



/* 4. Write a program to do the following patterns using do...while loop?
a) Pascal Triangle
b) ZOHO
CORP
ORAT
IONS */

public class Pascal {
    public static void main(String[] args) {
        int n = 5;
        int i = 0;
        do{
            int spc = n - i;
            do {
                System.out.print(" ");
                spc--;
            } while (spc > 0);

            int j = 0;
            int num = 1;
            do {
                if (j == 0) {
                    num = 1;
                } else {
                    num = num * (i - j + 1) / j;
                }
                System.out.print(num + " ");
                j++;
            } while (j <= i);

            System.out.println();
            i++;
        } while( i < n);
    }
}

class Stringiteration{
	public static void main(String[] args) {
		int n = 4;
		int i = 0;
		String s = "ZOHOCORPORATIONS";
		int row = 0;

		do{
			int col = 0;
			do {
				System.out.print(s.charAt(i) + " ");
 				i++;
				col++;
			} while(col < n);
			System.out.println(" ");
			row++;
		} while(row < n);
	}	
}


// 5. Define a method to find the sum of even numbers from the series 1, 2, 3, 4, 5, ...n using continue statement.

class Even {
	public static void main(String[] args) {
		
		Scanner in = new Scanner(System.in);
		System.out.print("Enter a number : ");
		int num = in.nextInt();
		int sum = 0;

		for (int i = 1; i <= num; i++) {
			if(i % 2 != 0) {
				continue;
			} else {
				sum += i;
			}	
		}	
		System.out.println("The sum of even number is " + sum);
	}
}


// 6. Define a method to convert the decimal number to a binary number?

class Dec {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		System.out.println("Enter a number : ");
		int num = in.nextInt();		
		System.out.println(convertTobi(num));
	}

	public static String convertTobi(int num) {
		if(num == 0) return "0";
        	String result = "";
        	while(num > 0) {
            		result = (num % 2) + result;
            		num/=2;
        	}
        	return result;	
	}
}


/* 7. Use both if and switch case statement as two ways to find the grade of a student.
Percent>=85 && Percent<=100 Grade ‘A’
Percent>=70 Grade ‘B’
Percent>=50 Grade ‘C’
otherwise print ”Fail” */

class Grade {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		
		System.out.print("Enter a Score:");
		int score = in.nextInt();

		if(score >= 85 && score <= 100) {
			System.out.println("Grade A");
		} else if (score >= 70) {
			System.out.println("Grade B");
		} else if (score >= 50) {
			System.out.println("Grade C");
		} else {
			System.out.println("Fail");
		}
	}
}

class Grade1 {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		System.out.print("Enter Score : ");
		int score = in.nextInt();

		int percent = score / 10;

		switch(percent) {
			case 10: 
				System.out.println("Grade A");
				break;
			
			case 9: 
				System.out.println("Grade A");
				break;

			case 8:
				if(score >= 85) {
					System.out.println("Grade A");
				} else {
					System.out.println("Grade B");
				}
				break;

			case 7:
				System.out.println("Grade B");
				break;

			case 6: 
				System.out.println("Grade C");
				break;
			
			case 5: 
				System.out.println("Grade C");
				break;

			default :
 				System.out.println("Fail");
		}

	}
}

---------------------------------------------------------------------------------------------------------------------------------

// Day -> 2 Part - II Array

// 1. Write a program that creates an integer array of 10 elements, accepts values of arrays and Find the sum of all odd numbers.

class Oddsum{
	public static void main(String[] args) {
		int[] arr = {11, 33, 30, 40, 50, 60, 70, 80, 90, 100};
		int len = arr.length;
		int sum = 0;

		for(int i = 0; i < len; i++) {
			if(arr[i] % 2 == 0) {
				continue;
			} else {
				sum += arr[i];
			}
		}
		System.out.println("Sum of all odd numbers : " + sum);
	}	
}


// 2. Write a program to take in 10 values and print only those numbers which are prime.

class Prime {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
			int[] arr = new int[10];
			int len = arr.length;
			
			System.out.print("Enter 10 numbes : ");
			for(int i = 0; i < len; i++) {
				arr[i] = in.nextInt();
			} 

			for(int i = 0; i < len; i++) {
				System.out.print(arr[i] + " ");
			}

			System.out.println("Prime Numbers are : ");
			for(int i = 0; i < len; i++) {
				if(isPrime(arr[i])) {
					System.out.print(arr[i] + " ");
				}
			}
	}
	
	public static boolean isPrime(int num) {
			if(num <= 1) {
				return false;
			}
			for(int i = 2; i < num; i++) {
				if(num % i == 0) {
					return false;
				}
			}	
		return true;
	}
}

// 3. Write a program which generates 30 terms of Fibonacci no in an array and then prints it.

class Fibo {
	public static void main(String[] args) {
		int[] arr = new int[30];
		int len = arr.length;

		arr[0] = 0; 
		arr[1] = 1;
		
		for(int i = 2; i < len; i++) {
			arr[i] = arr[i - 1] + arr[i - 2];
		}
		
		System.out.println("Fibonacci Numbers : ");
		for(int i = 0; i < len; i++) {
			System.out.print(arr[i] + " ");
		}
	}
}


/* 4. Design a function void print( ) with a single dimensional array x[ ] and n (as size of the array) as function arguments. 
The function calculates sum of only single digit and sum of only double digit elements from the array. 
Design a main() function to input size of the array ‘len' and 
single dimensional array of size 'len', and print the required result by invoking the function print( ). */

class Digit {
	public static void main(String[] args) {
		
		int[] arr = {1, 22, 3, 44, 5, 66};
		int len = arr.length;

		print(arr, len);
		singleDigit(arr, len);
		doubleDigit(arr, len);			
	}
	
	public static void print(int[] arr, int len){
		System.out.print("Array of length " + len + " : ");
		for(int i = 0; i < len; i++) {
			System.out.print(arr[i] + " ");
		}
		System.out.println(" ");
	}

	public static void singleDigit(int[] arr, int len) {
		int sum1 = 0;
		System.out.print("Sum of Single Digits : ");
		for(int i = 0; i < len; i++) {
			if(arr[i] >= 1 && arr[i] <= 9) {
				sum1 += arr[i];
			}
		}	
		System.out.println(sum1);
	}
	
	public static void doubleDigit(int[] arr, int len) {
		int sum2 = 0;
		System.out.print("Sum of Double Digits : ");
		for(int i = 0; i < len; i++) {
			if(arr[i] >= 10 && arr[i] <= 99) {
				sum2 += arr[i];
			}
		}	
		System.out.println(sum2);
	}
}


/* 5. Write a program to initialize the following character arrays and print a suitable message after checking the arrays whether the two arrays are identical or not. 
Make suitable use of Boolean data type. X[] =('m', 'n', 'o', 'p'} and Y[] =('m', 'n', 'o', 'p' }
X[] =('m', 'n', 'o', 'p'} and
Y[] =('m', 'n', 'o', 'p' } */

class Identical {
	public static void main(String[] args) {
		char[] x = {'m', 'n', 'o', 'p'};
		char[] y = {'m', 'n', 'o', 'p'};
		
		System.out.println(check(x, y));
		
	}
		
	public static boolean check(char[] x, char[] y) {
		int lenX = x.length;
		int lenY = y.length;

		if(lenX != lenY) return false;

		for(int i = 0; i < lenX; i++) {
			if(x[i] == y[i]) {
				continue;
			} else {
				return false;
			}	
		}
		return true;
	}
}


/* 6. Write a program to accept the year of graduation from school as an integer value from the users .
Using the Binary search technique on the sorted array of integers given below . 
Output the message “record exists" if the value input is located in the array and if not output the message record does not exits”.
{1982, 1987, 1993, 1996, 1999, 2003, 2006, 2007, 2009, 2010, 2016, 2002} */

class Graduation {
	public static void main(String[] args) {
		int[] arr = {1982, 1987, 1993, 1996, 1999, 2003, 2006, 2007, 2009, 2010, 2016, 2002};
		int len = arr.length;
		Arrays.sort(arr);
			
		for(int i = 0; i < len; i++) {
			System.out.println(arr[i] + " ");
		}

		Scanner in = new Scanner(System.in);
		System.out.print("Enter year : ");
		int year = in.nextInt();
		
		int start = 0;
		int end = len - 1;

		boolean chk = true;

		while (start <= end){
			int mid = (start + end) / 2;

			if(arr[mid] == year) {
				System.out.println("Record existis");
				chk = false;
				break;
			} else if(year > arr[mid]) {
				start = mid + 1;
			} else {
				end = mid - 1;
			}
		}
		if(chk) {
			System.out.println("Record doesn't existis");
		}	
	}
}


// 7. Write a program to input and store the weight of ten people. Sort and display them in descending order using the Selection sort technique.

class Sort {
	public static void main(String[] args) {
		int[] arr = {10, 35, 45, 22, 55, 9};
		int len = arr.length;
		
		selectionSort(arr, len);	
	}
		
	public static void selectionSort(int[] arr, int len) {
		for(int i = 0; i < len; i++) {
			int max = i;
			for(int j = i + 1; j < len; j++) {
				if(arr[j] > arr[max]) {
					max = j;
				}
			}

			int temp = arr[i]; 
			arr[i] = arr[max];
			arr[max] = temp;
		} 

		for(int i = 0; i < len-1; i++) { 
			System.out.print(arr[i] + " ");
		}
	}
}

// 8. Write a program which takes in 10 people’s age and gives number of people who are <18, 18-60, >60.

class Age {
	public static void main(String[] args) {
		
		Scanner in = new Scanner(System.in);
		int n = 10;
		int[] arr = new int[n];
			
		for(int i = 0; i < n; i++) {
			arr[i] = in.nextInt();
		}

		under18(arr, n);
		between18To16(arr, n);
		above60(arr, n);
		
	}
	
	public static void under18(int[] arr, int n) {
		System.out.println("Number of people below 18 years: ");
		int count1 = 0;
		for(int i = 0; i < n; i++) {
			if(arr[i] < 18) {
				count1++;
			}
		}
		System.out.println(count1);
	}

	public static void between18To16(int[] arr, int n) {
		System.out.println("Number of people between 18 - 16 years: ");
		int count2 = 0;
		for(int i = 0; i < n; i++) {
			if(arr[i] >= 18 && arr[i] <= 60) {
				count2++;
			}
		}
		System.out.println(count2);
	}

	public static void above60(int[] arr, int n) {
		System.out.println("Number of people above 60 years: ");
		int count3 = 0;
		for(int i = 0; i < n; i++) {
			if(arr[i] > 60) {	
				count3++;
			}
		}
		System.out.println(count3);
	}
}


// 9. Write an array which takes in roll no and marks in 3 subjects for 10 students. Format and Print the roll no, total marks and average for all students in a table form.

class Students {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		int[] rollNo = new int[10];
		int[] total = new int[10];
		int[] average = new int[10];

		for(int i = 0; i < 10; i++) {
			
			System.out.print("Enter Roll number : ");
			rollNo[i] = in.nextInt();
			
			System.out.print("Enter Marks for subject 1 : ");
			int subject1 = in.nextInt();

			System.out.print("Enter Marks for subject 2 : ");
			int subject2 = in.nextInt();
				
			System.out.print("Enter Marks for subject 3 : ");
			int subject3 = in.nextInt();
			
			int totalMarks = 0;
			totalMarks = subject1 + subject2 + subject3;
			total[i] = totalMarks;

			int avg = totalMarks / 3;
			average[i] = avg;
		}
				
		
		System.out.println("Roll No		Total marks		Average");
		for(int i = 0; i < 10; i++) {
			System.out.print(rollNo[i]);
			System.out.print("			");
			System.out.print(total[i]);
			System.out.print("			");
			System.out.println(average[i]);	
		}
	}
}


/* 10. Write a menu driven program to do following operation on two dimensional array A of size m x n. 
You should use user-defined methods which accept 2-D array A, and its size m and n as arguments. 
The options are:
● To input elements into matrix of size m x n
● To display elements of matrix of size m x n
● Sum of all elements of matrix of size m x n
● To display row-wise sum of matrix of size m x n
● To display column-wise sum of matrix of size m x n
● To create transpose of matrix of size n x m */

class Matrix {
	static Scanner in = new Scanner(System.in);
    	public static void main(String[] args) {
        	System.out.println("Enter m and n value for m x n matrix");

	        int m = in.nextInt();
        	int n = in.nextInt();

	        int[][] matrix = input(m, n);
        	display(matrix);
        	sum(matrix);
        	rowWise(matrix);
        	colWise(matrix);
		transpose(matrix);
		
    	}

    	public static int[][] input(int m, int n) {
        	int[][] matrix = new int[m][n];
		System.out.println("Enter 2d array elements : ");
	        for(int i = 0; i < m; i++) {
        	    	for(int j = 0; j < n; j++) {
                		matrix[i][j] = in.nextInt();
            		}
        	}	
        	return matrix;
	}

    	public static void display(int[][] matrix) {
        	int m = matrix.length;
        	int n = matrix[0].length;
		System.out.println("2d Array : ");

        	for(int i = 0; i < m; i++) {
        	    	for(int j = 0; j < n; j++) {
                		System.out.print(matrix[i][j] + " ");
            		}
            		System.out.println(" ");
        	}
    	}

    	public static void sum(int[][] matrix) {
        	int m = matrix.length;
	        int n = matrix[0].length;

   	     	int sum= 0;
        	for(int i = 0; i < m; i++) {
            		for(int j = 0; j < n; j++) {
        	        	sum += matrix[i][j];
            		}
        	}
        	System.out.println("The sum of all elements : " + sum);
    	}

    	public static void rowWise(int[][] matrix) {
        	int m = matrix.length;
        	int n = matrix[0].length;
        	int[] sum = new int[m];

	        for(int i = 0; i < m; i++) {
        	    int rowsum = 0;
            		for(int j = 0; j < n; j++) {
                		rowsum += matrix[i][j];
            		}
        	    	sum[i] = rowsum;
        	}
	
        	System.out.print("Sum of rows : ");
        	for(int i = 0; i < m; i++) {
            		System.out.print(sum[i] + " ");
     	   	}	
		System.out.println(" ");
    	}

    	public static void colWise(int[][] matrix) {
        	int m = matrix.length;
        	int n = matrix[0].length;
        	int[] sum = new int[n];

	        for(int i = 0; i < n; i++) {
        	    int colsum = 0;
            		for(int j = 0; j < m; j++) {
                		colsum += matrix[j][i];
            		}
            		sum[i] = colsum;
        	}

        	System.out.print("Sum of cols : ");
        	for(int i = 0; i < n; i++) {
            		System.out.print(sum[i] + " ");
        	}
		System.out.println(" ");
    	}

	public static void transpose(int[][] matrix) {
		int m = matrix.length;	
		int n = matrix[0].length;
		int[][] transpose = new int[n][m];

		for(int i = 0; i < m; i++) {
			for(int j = 0; j < n; j++) {
				transpose[j][i] = matrix[i][j];
			}
		}
		
		System.out.println("Transpose 2d array : ");
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				System.out.print(transpose[i][j] + " ");
			}
			System.out.println(" ");
		}
	}
}

----------------------------------------------------------------------------------------

// Day -> 2 Part - III String

/* 1. Given two binary strings a and b, return their sum as a binary string.
Input: a = "11", b = "1"
Output: "100"
‌
Input: a = "1010", b = "1011"
Output: "10101"
‌
Constraints:
1 <= a.length, b.length <= 10^4
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself. */

class Sum {
	public static void main(String[] args)	{
		Scanner in = new Scanner(System.in);
		System.out.println("Enter a : ");
		String a = in.nextLine();
		System.out.println("Enter b : ");
		String b = in.nextLine();
		
		int i = a.length()-1;
		int j = b.length()-1;
		int carry = 0;
		String result = "";
		
		while(i >= 0 || j >= 0 || carry != 0) {
			
			int A = (i >= 0) ? a.charAt(i) - 48 : 0;
			int B = (j >= 0) ? b.charAt(j) - 48 : 0;
			
			int sum = A + B + carry;
			carry = sum / 2;
		
			result = (sum % 2) + result;

			i--;
			j--;
		}

		int value = Integer.parseInt(result);
		System.out.println(value);
		System.out.println(result);
	}
}


/* 2. Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.
‌
For example:
A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28
...
‌
Example 1:
Input: columnNumber = 1
Output: "A"
‌
Example 2:
Input: columnNumber = 28
Output: "AB"
‌
Example 3:
Input: columnNumber = 701
Output: "ZY"
‌
Constraints:
1 <= columnNumber <= 2^31 - 1 */

class Excel {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		System.out.print("Enter a number : ");
		int n = in.nextInt();
		String column = " ";
		
		while(n != 0) {
			n--;
			char ch = (char) ((n % 26) + 65);
			column = ch + column;	
			n = n / 26;
		}
		System.out.println(column);
	}
}

/* 3. Given a string s, reverse only all the vowels in the string and return it.
‌
The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.
‌
Example 1:
Input: s = "hello"
Output: "holle"
‌*/
	
class Vowels {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		
		String str = in.nextLine();
		
		System.out.println(swap(str));
	}
	
	public static String swap(String str){
		int len = str.length();
		int left = 0;
		int right = len - 1;

		Set<Character> vowels = new HashSet<Character>();
		for(char ch : "aeiouAEIOU".toCharArray()) {
			vowels.add(ch);
		}
		
		char[] c = str.toCharArray();
		
		while(left < right) {
			if(vowels.contains(c[left]) && vowels.contains(c[right])) {
				
				char temp = c[left];
				c[left] = c[right];
				c[right] = temp;

				left++;
				right--;
			} else if(vowels.contains(c[left])) {
				right--;
			} else {
				left++;
			}
		}
		return new String(c);
	}
}


/* 4. You are given two strings s and t.
‌
String t is generated by random shuffling string s and then add one more letter at a random position.
‌
Return the letter that was added to t.
‌
Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
‌
Example 2:
Input: s = "", t = "y"
Output: "y"
‌
Constraints:
0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters. */

class Shuffling {
	public static void main(String[] args) {
		
		Scanner in = new Scanner(System.in);
		
		System.out.println("Enter orginal string : ");
		String s = in.nextLine();
		System.out.println("Enter string with additional characters : ");
		String t = in.nextLine();
		
		shuffle(s, t);
	}
	
	public static void shuffle(String s, String t) { 
		
		HashMap<Character, Integer> map = new HashMap<>();

		for(char ch : t.toCharArray()) {
			if(map.containsKey(ch)) {
				map.put(ch, map.get(ch) + 1);
			} else {
				map.put(ch, 1);
			}
		}
		
		for(char ch : s.toCharArray()) {	
			if(map.containsKey(ch)) {
				int count = map.get(ch) - 1;
				if(count == 0) {
					map.remove(ch);
				} else {
					map.put(ch, count);
				}
			}
		}
		
		String result = "";
		for(char ch : map.keySet()) {
			result += ch;
		}
		
		System.out.println("Additional Character is : ");
		System.out.println(result);
	}
}


/* 5. Given two strings s and t, return true if s is a subsequence of t, or false otherwise.
‌
A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing 
the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).
‌
Example 1:
Input: s = "abc", t = "ahbgdc"
Output: true
‌
Example 2:
Input: s = "axc", t = "ahbgdc"
Output: false
‌
Constraints:
0 <= s.length <= 100
0 <= t.length <= 10^4
s and t consist only of lowercase English letters.
‌
Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 10^9, and you want to check one by one to see if t has its subsequence. 
In this scenario, how would you change your code? */

class Formation {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		
		System.out.println("Enter string to form : ");
		String s = in.nextLine();
		System.out.println("Enter string : ");
		String t = in.nextLine();
		
		System.out.println(isCheck(s, t));
	}
	
	public static boolean isCheck(String s, String t) {
		HashMap<Character, Integer> map = new HashMap<>();

		for(char ch : t.toCharArray()) {
			if(map.containsKey(ch)) {
				map.put(ch, map.get(ch) + 1);
			} else {
				map.put(ch, 1);
			}
		}
		
		for(char ch : s.toCharArray()) {	
			if(map.containsKey(ch)) {
				int count = map.get(ch) - 1;
				if(count == 0) {
					map.remove(ch);
				} else {
					map.put(ch, count);
				}
			} else {
				return false;
			}
		}
		return true;
	}
}

/* 6. Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.
‌
You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.
‌
Example 1:
Input: num1 = "11", num2 = "123"
Output: "134"
‌
Example 2:
Input: num1 = "456", num2 = "77"
Output: "533"
‌
Example 3:
Input: num1 = "0", num2 = "0"
Output: "0"
‌
Constraints:
1 <= num1.length, num2.length <= 10^4
num1 and num2 consist of only digits.
num1 and num2 don't have any leading zeros except for the zero itself. */

class Add {
	public static void main(String[] args){
		Scanner in = new Scanner(System.in);	
		System.out.print("Enter Two numbers : ");
		String num1 = in.nextLine();
		String num2 = in.nextLine();

		int number1 = convert(num1);
		int number2 = convert(num2);
		
		int sum = number1 + number2;

		System.out.println("The sum is : " + sum);
	}
		
	public static int convert(String n) {
		int num = 0;
		int i = 0;
	 
		while(i < n.length()) {
			num = num * 10;
			num += n.charAt(i++) - '0';
		}
		
		return num;
	}		
	
}

/* 7. Given a string s, return the number of segments in the string.
‌
A segment is defined to be a contiguous sequence of non-space characters.
‌
Example 1:
Input: s = "Hello, my name is John"
Output: 5
Explanation: The five segments are ["Hello,", "my", "name", "is", "John"]
‌
Example 2:
Input: s = "Hello"
Output: 1
‌
Constraints:
0 <= s.length <= 300
s consists of lowercase and uppercase English letters, digits, or one of the following characters "!@#$%^&*()_+-=',.:"
The only space character in s is ' '. */

class Sequence {
	public static void main(String[] args) {
		String s = "Hello, my name is John";
		int len = s.length();
		
		List <String> list = new ArrayList<>();
		String temp = "";

		for(int i = 0; i < len; i++) {
			if(s.charAt(i) == ' ') {
				list.add(temp);
				temp = "";
			} else {
				temp += s.charAt(i);

				if(i == len-1) {
					list.add(temp);
				}
			}
		}
		System.out.println(list);
	}
}


/* 8. We define the usage of capitals in a word to be right when one of the following cases holds:
1. All letters in this word are capitals, like "USA".
2. All letters in this word are not capitals, like "leetcode".
3. Only the first letter in this word is capital, like "Google".
Given a string word, return true if the usage of capitals in it is right.
Example 1:
Input: word = "USA"
Output: true
‌
Example 2:
Input: word = "FlaG"
Output: false
‌
Constraints:
1 <= word.length <= 100
word consists of lowercase and uppercase English letters. */

class Capitals {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		System.out.print("Enter a String : ");
		String word = in.nextLine();	
		System.out.println(Capitals(word));		
	}	
		
	public static boolean Capitals(String word) {
		
		if(word.equals(word.toUpperCase())) {
			return true;
		}
		
		if(word.equals(word.toLowerCase())) {
			return true;
		}
		
		if(Character.isUpperCase(word.charAt(0)) && word.substring(1).equals(word.substring(1).toLowerCase())) {	
			return true;
		}
		
		return false;
	}
}